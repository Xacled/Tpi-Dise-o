@page "/turnos/listado"
@using Reciplas.Models;
@inject NotificationService NotificationService 
@inherits OwningComponentBase<Turno>
@using System.Collections.Generic;  
@using Reciplas.Repository
@inject DialogService DialogService   
@inject NavigationManager NavigationManager

@using Radzen
@inject TooltipService tooltipService


<PageTitle>Turno</PageTitle>

<TituloPrincipal TextoPrincipal="Turnos"/>   <br>
 
@page "/generar-oblea"
@inject NotificationService NotificationService
@inject DialogService DialogService

<RadzenButton 
    Click="OpenModal" 
    Variant="Variant.Flat" 
    Text="Generar código de oblea" 
    Icon="assignment_returned" 
    ButtonStyle="ButtonStyle.Success" />

@if (isModalVisible)
{
    <div class="dialog-overlay">
        <div class="dialog-content">
            <h3>Código de oblea generado con éxito!</h3>
            <RadzenButton 
                Text="Imprimir Oblea" 
                Icon="print" 
                ButtonStyle="ButtonStyle.Primary" 
                Click="PrintOblea" />
        </div>
    </div>
}




<br>
<br>
<CListado TItem="Turno" Data="@turnos" PageSize="5" Frozen="true">
       <Columns> 
        <RadzenDataGridColumn TItem="Turno" Property="NumeroTurno" Title="Número" Width="80px" /> 
        <RadzenDataGridColumn TItem="Turno" Title="Estado" Width="100px">
            <Template Context="data">
                @(data.Estado ? "Ocupado" : "Ocupado")
            </Template>
        </RadzenDataGridColumn>      
        <RadzenDataGridColumn TItem="Turno" Property="FechaTurno" FormatString="{0:d}" Title="Fecha" Width="90px" />
        <RadzenDataGridColumn TItem="Turno" Property="FechaTurno" FormatString="{0:t}" Title="Hora" Width="90px" />
        <RadzenDataGridColumn TItem="Turno" Title="Acciones" Width="80px" Context="clientes" Filterable="false" Sortable="false"> 
        <Template Context="item"> 
            <RadzenButton Click="@(args => NavigationManager.NavigateTo($"/turnos/detalles/{item.Id}"))" TextAlign="TextAlign.Center" Icon="list" ButtonStyle="ButtonStyle.Success" Style="margin-left: 5px" />
                <RadzenButton Style="margin-left: 15px" Variant="Variant.Outlined" Click="@(args => NavigationManager.NavigateTo($"/turnos/editar/{item.Id}"))" Icon="edit" />
                <RadzenButton Click="@(args => RegisterEliminado(item.Id))" TextAlign="TextAlign.Center" Icon="delete" ButtonStyle="ButtonStyle.Danger" Style="margin-left: 15px" />

                </Template>
        </RadzenDataGridColumn> 
        
    </Columns>  
</CListado> 
<br> 
<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
    <RadzenButton Click="@(args => NavigationManager.NavigateTo("/turnos/nuevo"))" Variant="Variant.Flat" Text="Nuevo" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Secondary" />
</RadzenStack>
<br> 

@code {
    bool isModalVisible = false;

    void OpenModal() => isModalVisible = true;

    void CloseModal() => isModalVisible = false;

    void PrintOblea()
    {
        CloseModal();
        NotificationService.Notify(new NotificationMessage 
        { 
            Severity = NotificationSeverity.Success, 
            Detail = "Impresión de oblea exitosa." 
        });
    }

    IEnumerable<Turno> turnos;   
    Turno turno = new();
    protected bool cargando = true;
    string _estado; 

    private void OnClick(string text)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Detail = text });
    }
    protected async Task QuitarAdjunto(int Id)
    {
    //
    }
    private int _count;
protected override async Task OnInitializedAsync()
{
    // Datos hardcodeados
    turnos = new List<Turno>
    {
        new Turno { NumeroTurno = 1, Estado = true, FechaTurno = DateTime.Now.AddDays(-1) },
        new Turno { NumeroTurno = 2, Estado = false, FechaTurno = DateTime.Now },
        new Turno { NumeroTurno = 3, Estado = true, FechaTurno = DateTime.Now.AddDays(1) },
        new Turno { NumeroTurno = 4, Estado = false, FechaTurno = DateTime.Now.AddDays(2) },
        new Turno { NumeroTurno = 5, Estado = true, FechaTurno = DateTime.Now.AddDays(3) }
    };

    // Aquí ya no es necesario usar repositorios ni obtener datos de la base de datos

    _count = turnos.Count();

    // Asegúrate de que los datos se están cargando correctamente
    Console.WriteLine("Datos hardcodeados cargados:");
    foreach (var turno in turnos)
    {
        Console.WriteLine($"Turno {turno.NumeroTurno}: {turno.Estado}");
    }
}



   async Task RegisterEliminado(int turnoId)
    {
        var result = await DialogService.OpenAsync("Está seguro de que desea eliminar el Turno?", ds =>
        @<div>
            <div class="row">
                <div class="col">
                    <RadzenButton Click=@(async args => { await RegistroEliminado(turnoId); ds.Close(true); }) TextAlign="TextAlign.Center" Icon="delete" ButtonStyle="ButtonStyle.Danger" Style="margin-left: 5px" Text="Eliminar" class="me-1" />
                    <RadzenButton Click="() => ds.Close(false)" TextAlign="TextAlign.Center" Icon="delete" ButtonStyle="ButtonStyle.Light" Style="margin-left: 5px" Text="Cancelar" class="me-1 float-end" />
                </div> 
            </div>
        </div>
        );
    }

    async Task RegistroEliminado(int turnoId)
    {
       
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Detail = "Registro eliminado."
            });

    }
}

